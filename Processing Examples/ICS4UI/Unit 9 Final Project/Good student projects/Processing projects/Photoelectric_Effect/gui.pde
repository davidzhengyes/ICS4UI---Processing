/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:304586:
  appc.background(255);
} //_CODE_:window1:304586:

public void Intensity_Change(GCustomSlider source, GEvent event) { //_CODE_:Intensity_Slider:320953:
  l.intensity = Intensity_Slider.getValueI();
  l.timeIntervals = (1 / (l.intensity / 60.0)) * 1000;
  textUpdate();
} //_CODE_:Intensity_Slider:320953:

public void WaveLength_Change(GCustomSlider source, GEvent event) { //_CODE_:WaveLength_Slider:458640:
  l.wavelength_nm = WaveLength_Slider.getValueI();
  l.wavelength_m = l.nanoMeterToMeter(l.wavelength_nm);
  l.frequency = l.wavelengthToFrequency(l.wavelength_m);
  l.colour = wavelengthToRGB(l.wavelength_nm);
  textUpdate();
} //_CODE_:WaveLength_Slider:458640:

public void Voltage_Change(GCustomSlider source, GEvent event) { //_CODE_:Voltage_Slider:593287:
  b.voltage = round(Voltage_Slider.getValueF() * 100) / 100.0;
} //_CODE_:Voltage_Slider:593287:

public void Metal_Choice(GDropList source, GEvent event) { //_CODE_:Metal_Droplist:360581:
  currentMetal = m.get(Metal_Droplist.getSelectedIndex());
  textUpdate();
} //_CODE_:Metal_Droplist:360581:

public void Current_Reset_Clicked(GButton source, GEvent event) { //_CODE_:Current_Reset:271320:
  currentTime = 0;
  es = 0;
  d.currentUpdate(es / ((millis() - currentTime) / 1000.0) * 60);
} //_CODE_:Current_Reset:271320:

public void eV_Change(GCustomSlider source, GEvent event) { //_CODE_:eV_Slider:650587:
  custom.workFunction_eV = round(eV_Slider.getValueF() * 100) / 100.0;
  custom.workFunction_J = custom.electronVoltsToJoules(custom.workFunction_eV);
  textUpdate();
} //_CODE_:eV_Slider:650587:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("PhotoEletric Effect");
  window1 = GWindow.getWindow(this, "GUI Options", 0, 0, 300, 600, JAVA2D);
  window1.noLoop();
  window1.addDrawHandler(this, "win_draw1");
  Intensity_Slider = new GCustomSlider(window1, 36, 504, 100, 40, "grey_blue");
  Intensity_Slider.setShowValue(true);
  Intensity_Slider.setShowLimits(true);
  Intensity_Slider.setLimits(1000, 0, 2000);
  Intensity_Slider.setNumberFormat(G4P.INTEGER, 0);
  Intensity_Slider.setOpaque(true);
  Intensity_Slider.addEventHandler(this, "Intensity_Change");
  label1 = new GLabel(window1, 36, 460, 100, 40);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Laser Intensity (Photons/min)");
  label1.setOpaque(false);
  WaveLength_Slider = new GCustomSlider(window1, 165, 504, 100, 40, "grey_blue");
  WaveLength_Slider.setShowValue(true);
  WaveLength_Slider.setShowLimits(true);
  WaveLength_Slider.setLimits(600, 200, 800);
  WaveLength_Slider.setNumberFormat(G4P.INTEGER, 0);
  WaveLength_Slider.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  WaveLength_Slider.setOpaque(true);
  WaveLength_Slider.addEventHandler(this, "WaveLength_Change");
  label2 = new GLabel(window1, 165, 460, 100, 40);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Laser Wavelength (nano-meters)");
  label2.setOpaque(false);
  Voltage_Slider = new GCustomSlider(window1, 36, 405, 100, 40, "grey_blue");
  Voltage_Slider.setShowValue(true);
  Voltage_Slider.setShowLimits(true);
  Voltage_Slider.setLimits(0.5, 0.0, 20.0);
  Voltage_Slider.setNumberFormat(G4P.DECIMAL, 2);
  Voltage_Slider.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  Voltage_Slider.setOpaque(true);
  Voltage_Slider.addEventHandler(this, "Voltage_Change");
  label3 = new GLabel(window1, 36, 360, 100, 40);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Battery Voltage (volts)");
  label3.setOpaque(false);
  Metal_Droplist = new GDropList(window1, 41, 323, 90, 180, 8);
  Metal_Droplist.setItems(loadStrings("list_360581"), 0);
  Metal_Droplist.addEventHandler(this, "Metal_Choice");
  label4 = new GLabel(window1, 36, 286, 100, 31);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Metal Selection");
  label4.setOpaque(false);
  Metal_Info = new GLabel(window1, 38, 103, 228, 160);
  Metal_Info.setTextAlign(GAlign.CENTER, GAlign.TOP);
  Metal_Info.setText("Metal Information");
  Metal_Info.setOpaque(true);
  label5 = new GLabel(window1, 38, 22, 228, 56);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("Photo Electric Effect Simulation");
  label5.setTextBold();
  label5.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label5.setOpaque(true);
  Current_Reset = new GButton(window1, 165, 405, 100, 40);
  Current_Reset.setText("Reset Current");
  Current_Reset.addEventHandler(this, "Current_Reset_Clicked");
  eV_Slider = new GCustomSlider(window1, 165, 322, 100, 40, "grey_blue");
  eV_Slider.setShowValue(true);
  eV_Slider.setShowLimits(true);
  eV_Slider.setLimits(2.0, 0.0, 15.0);
  eV_Slider.setNumberFormat(G4P.DECIMAL, 2);
  eV_Slider.setLocalColorScheme(GCScheme.RED_SCHEME);
  eV_Slider.setOpaque(true);
  eV_Slider.addEventHandler(this, "eV_Change");
  label6 = new GLabel(window1, 160, 286, 109, 31);
  label6.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label6.setText("Custom Metal (eV)");
  label6.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GCustomSlider Intensity_Slider; 
GLabel label1; 
GCustomSlider WaveLength_Slider; 
GLabel label2; 
GCustomSlider Voltage_Slider; 
GLabel label3; 
GDropList Metal_Droplist; 
GLabel label4; 
GLabel Metal_Info; 
GLabel label5; 
GButton Current_Reset; 
GCustomSlider eV_Slider; 
GLabel label6; 