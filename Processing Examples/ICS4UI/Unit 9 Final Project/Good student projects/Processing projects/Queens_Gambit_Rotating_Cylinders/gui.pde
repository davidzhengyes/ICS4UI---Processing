/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:946651:
  appc.background(240);
} //_CODE_:window1:946651:

public void xRotChanged(GSlider source, GEvent event) { //_CODE_:xRotation:252674:

  needToGetSpeed = true;  //When the slider value is changed, make note that the value must be assigned to its respective variable at the start of the next frame.
  
} //_CODE_:xRotation:252674:

public void yRotChanged(GSlider source, GEvent event) { //_CODE_:yRotation:729452:
  
  needToGetSpeed = true;  //When the slider value is changed, make note that the value must be assigned to its respective variable at the start of the next frame.
  
} //_CODE_:yRotation:729452:

public void zRotChanged(GSlider source, GEvent event) { //_CODE_:zRotation:998556:

  needToGetSpeed = true;  //When the slider value is changed, make note that the value must be assigned to its respective variable at the start of the next frame.

} //_CODE_:zRotation:998556:

public void screenRotChanged(GSlider source, GEvent event) { //_CODE_:screenRotation:375379:

  needToGetSpeed = true;  //When the slider value is changed, make note that the value must be assigned to its respective variable at the start of the next frame.
  
} //_CODE_:screenRotation:375379:

public void pauseButtonPressed(GButton source, GEvent event) { //_CODE_:pauseButton:994983:
  
  //The pause button is the only GUI interactable that isn't called at the beginning of the next draw frame.
  //This is because noLoop() causes draw() to stop being called, and if draw() needs to be called in order to call loop(),
  //then loop() would never be called and the animation wouldn't be able to be unpaused.
  
  paused = !paused;  //Flip the value of pause.
  
  //If the animation is paused, make the button turn green and say resume and stop calling draw()
  if(paused) {
    pauseButton.setText("Resume");
    pauseButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
    noLoop();
  }
  //If the animation is unpaused, make the button turn red and say pause and start calling draw()
  else {
    pauseButton.setText("Pause");
    pauseButton.setLocalColorScheme(GCScheme.RED_SCHEME);
    loop();
  }
  
} //_CODE_:pauseButton:994983:

public void resetOButtonPressed(GButton source, GEvent event) { //_CODE_:resetOButton:235670:

  needToResetO = true;  //When this button is pressed, make note that the orientation must be reset at the start of the next frame.
  
} //_CODE_:resetOButton:235670:

public void defaultButtonPressed(GButton source, GEvent event) { //_CODE_:defaultButton:452861:
  
  needToSetQG = true;  //When this button is pressed, make note that the settings must be changed to match The Queen's Gambit closing credits at the start of the next frame.

} //_CODE_:defaultButton:452861:

public void invertBoxChecked(GCheckbox source, GEvent event) { //_CODE_:invertBox:908653:
 
} //_CODE_:invertBox:908653:

public void strokeBoxChecked(GCheckbox source, GEvent event) { //_CODE_:strokeBox:955544:
    
} //_CODE_:strokeBox:955544:

public void resetRButtonPressed(GButton source, GEvent event) { //_CODE_:resetRButton:803877:
   
  needToResetR = true;  //When this button is pressed, make note that the rotationg speeds must be reset at the start of the next frame.
  
} //_CODE_:resetRButton:803877:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 340, 500, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  xRotation = new GSlider(window1, 10, 220, 320, 60, 10.0);
  xRotation.setShowValue(true);
  xRotation.setLimits(0, -180, 180);
  xRotation.setNbrTicks(3);
  xRotation.setShowTicks(true);
  xRotation.setNumberFormat(G4P.INTEGER, 0);
  xRotation.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  xRotation.setOpaque(false);
  xRotation.addEventHandler(this, "xRotChanged");
  yRotation = new GSlider(window1, 10, 300, 320, 50, 10.0);
  yRotation.setShowValue(true);
  yRotation.setLimits(0, -180, 180);
  yRotation.setNbrTicks(3);
  yRotation.setShowTicks(true);
  yRotation.setNumberFormat(G4P.INTEGER, 0);
  yRotation.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  yRotation.setOpaque(false);
  yRotation.addEventHandler(this, "yRotChanged");
  zRotation = new GSlider(window1, 10, 370, 320, 50, 10.0);
  zRotation.setShowValue(true);
  zRotation.setLimits(0, -180, 180);
  zRotation.setNbrTicks(3);
  zRotation.setShowTicks(true);
  zRotation.setNumberFormat(G4P.INTEGER, 0);
  zRotation.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  zRotation.setOpaque(false);
  zRotation.addEventHandler(this, "zRotChanged");
  togGroup1 = new GToggleGroup();
  screenRotation = new GSlider(window1, 10, 140, 320, 50, 10.0);
  screenRotation.setShowValue(true);
  screenRotation.setLimits(0, -180, 180);
  screenRotation.setNbrTicks(3);
  screenRotation.setShowTicks(true);
  screenRotation.setNumberFormat(G4P.INTEGER, 0);
  screenRotation.setOpaque(false);
  screenRotation.addEventHandler(this, "screenRotChanged");
  pauseButton = new GButton(window1, 10, 10, 100, 40);
  pauseButton.setText("Pause");
  pauseButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  pauseButton.addEventHandler(this, "pauseButtonPressed");
  resetOButton = new GButton(window1, 120, 10, 100, 40);
  resetOButton.setText("Reset Orientation");
  resetOButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  resetOButton.addEventHandler(this, "resetOButtonPressed");
  defaultButton = new GButton(window1, 80, 430, 180, 40);
  defaultButton.setText("Queen's Gambit Settings");
  defaultButton.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  defaultButton.addEventHandler(this, "defaultButtonPressed");
  invertBox = new GCheckbox(window1, 10, 60, 150, 20);
  invertBox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  invertBox.setText("Invert alternating rows");
  invertBox.setOpaque(false);
  invertBox.addEventHandler(this, "invertBoxChecked");
  invertBox.setSelected(true);
  strokeBox = new GCheckbox(window1, 10, 80, 140, 20);
  strokeBox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  strokeBox.setText("Draw shape outlines");
  strokeBox.setOpaque(false);
  strokeBox.addEventHandler(this, "strokeBoxChecked");
  resetRButton = new GButton(window1, 230, 10, 100, 40);
  resetRButton.setText("Reset Rotation Speed");
  resetRButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  resetRButton.addEventHandler(this, "resetRButtonPressed");
  label1 = new GLabel(window1, 90, 120, 160, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Screen Rotation Speed");
  label1.setOpaque(false);
  label2 = new GLabel(window1, 294, 180, 50, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("180°");
  label2.setOpaque(false);
  label3 = new GLabel(window1, -6, 180, 50, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("-180°");
  label3.setOpaque(false);
  label4 = new GLabel(window1, 80, 200, 180, 20);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Cylinder x-axis Rotation Speed");
  label4.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label4.setOpaque(false);
  label5 = new GLabel(window1, 80, 280, 180, 20);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("Cylinder y-axis Rotation Speed");
  label5.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label5.setOpaque(false);
  label6 = new GLabel(window1, 80, 350, 180, 20);
  label6.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label6.setText("Cylinder z-axis Rotation Speed");
  label6.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label6.setOpaque(false);
  label7 = new GLabel(window1, -6, 270, 50, 20);
  label7.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label7.setText("-180°");
  label7.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label7.setOpaque(false);
  label8 = new GLabel(window1, -6, 410, 50, 20);
  label8.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label8.setText("-180°");
  label8.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label8.setOpaque(false);
  label9 = new GLabel(window1, -6, 340, 50, 20);
  label9.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label9.setText("-180°");
  label9.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label9.setOpaque(false);
  label10 = new GLabel(window1, 294, 410, 50, 20);
  label10.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label10.setText("180°");
  label10.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label10.setOpaque(false);
  label11 = new GLabel(window1, 294, 340, 50, 20);
  label11.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label11.setText("180°");
  label11.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label11.setOpaque(false);
  label12 = new GLabel(window1, 294, 270, 50, 20);
  label12.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label12.setText("180°");
  label12.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label12.setOpaque(false);
  label13 = new GLabel(window1, 0, 480, 240, 20);
  label13.setText("*rotation speeds in degrees/second");
  label13.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GSlider xRotation; 
GSlider yRotation; 
GSlider zRotation; 
GToggleGroup togGroup1; 
GSlider screenRotation; 
GButton pauseButton; 
GButton resetOButton; 
GButton defaultButton; 
GCheckbox invertBox; 
GCheckbox strokeBox; 
GButton resetRButton; 
GLabel label1; 
GLabel label2; 
GLabel label3; 
GLabel label4; 
GLabel label5; 
GLabel label6; 
GLabel label7; 
GLabel label8; 
GLabel label9; 
GLabel label10; 
GLabel label11; 
GLabel label12; 
GLabel label13; 
